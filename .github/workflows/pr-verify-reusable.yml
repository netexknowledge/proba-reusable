name: PR-VERIFY-REUSABLE

on:
    workflow_call:
        secrets:
            TEAMS_WEBHOOK_URL:
                required: false
        # inputs:
        #     config-path:
        #         required: true
        #         type: string
        # secrets:
        #     envPAT:
        #         required: true
permissions: #write-all
    contents: read
    packages: read
    # # To report GitHub Actions status checks
    statuses: write
    # For codeql scanning
    security-events: write
jobs:
    code-lint:
        runs-on: netex-platform-ubuntu-latest
        steps:
            - 
                name: Checkout code
                uses: actions/checkout@v4
                with:
                # super-linter needs the full git history to get the
                # list of files that changed across commits
                    fetch-depth: 0

            - 
                name: Parse JSON and set environment variables
                id: parse_json
                run: |
                    if [ -f ".github/pr-verify-linter.json" ]; then
                        CONFIG=$(cat .github/pr-verify-linter.json)
                    else
                        CONFIG="{}"
                    fi
        
                    # Valores por defecto
                    declare -A default_vars
                    default_vars=(
                    ["FILTER_REGEX_INCLUDE"]=".*code/.*"
                    ["VALIDATE_GITHUB_ACTIONS"]="false"
                    ["VALIDATE_CHECKOV"]="false"
                    ["VALIDATE_KUBERNETES_KUBECONFORM"]="false"
                    ["VALIDATE_MARKDOWN"]="false"
                    ["VALIDATE_OPENAPI"]="false"

                    )
        
                    # Parsear JSON y establecer variables de entorno
                    for key in $(echo $CONFIG | jq -r 'keys[]'); do
                        value=$(echo $CONFIG | jq -r --arg key "$key" '.[$key]')
                        echo "$key=$value" >> $GITHUB_ENV
                        default_vars[$key]=$value
                    done
        
                    # Establecer valores por defecto si no estÃ¡n en el JSON
                    for key in "${!default_vars[@]}"; do
                    if [[ -z "${!key}" ]]; then
                        echo "$key=${default_vars[$key]}" >> $GITHUB_ENV
                    fi
                    done
        
            -
                name: Show environment variables
                run: |
                    for key in "${!default_vars[@]}"; do
                    echo "$key=${!key}"
                    done


            - # https://github.com/marketplace/actions/super-linter
                name: Super-Linter
                uses: super-linter/super-linter/slim@v6.7.0
                env:
                    GITHUB_TOKEN: ${{ github.token }} ## In documentation apear like that
                    # GITHUB_TOKEN: ${{ github.token }} ## In documentation apear like that
                    GH_TOKEN: ${{ github.token }}
                    ANSIBLE_CONFIG_FILE: ${{ env.ANSIBLE_CONFIG_FILE }}
                    ANSIBLE_DIRECTORY: ${{ env.ANSIBLE_DIRECTORY }}
                    BASH_EXEC_IGNORE_LIBRARIES: ${{ env.BASH_EXEC_IGNORE_LIBRARIES }}
                    BASH_FILE_NAME: ${{ env.BASH_FILE_NAME }}
                    BASH_SEVERITY: ${{ env.BASH_SEVERITY }}
                    CHECKOV_FILE_NAME: ${{ env.CHECKOV_FILE_NAME }}
                    CLANG_FORMAT_FILE_NAME: ${{ env.CLANG_FORMAT_FILE_NAME }}
                    CREATE_LOG_FILE: ${{ env.CREATE_LOG_FILE }}
                    CSS_FILE_NAME: ${{ env.CSS_FILE_NAME }}
                    DEFAULT_WORKSPACE: ${{ env.DEFAULT_WORKSPACE }}
                    DISABLE_ERRORS: ${{ env.DISABLE_ERRORS }}
                    DOCKERFILE_HADOLINT_FILE_NAME: ${{ env.DOCKERFILE_HADOLINT_FILE_NAME }}
                    EDITORCONFIG_FILE_NAME: ${{ env.EDITORCONFIG_FILE_NAME }}
                    ENABLE_GITHUB_ACTIONS_GROUP_TITLE: ${{ env.ENABLE_GITHUB_ACTIONS_GROUP_TITLE }}
                    ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: ${{ env.ENABLE_GITHUB_ACTIONS_STEP_SUMMARY }}
                    FILTER_REGEX_EXCLUDE: ${{ env.FILTER_REGEX_EXCLUDE }}
                    FILTER_REGEX_INCLUDE: ${{ env.FILTER_REGEX_INCLUDE }}
                    GITHUB_ACTIONS_CONFIG_FILE: ${{ env.GITHUB_ACTIONS_CONFIG_FILE }}
                    GITHUB_CUSTOM_API_URL: ${{ env.GITHUB_CUSTOM_API_URL }}
                    GITHUB_CUSTOM_SERVER_URL: ${{ env.GITHUB_CUSTOM_SERVER_URL }}
                    GITHUB_DOMAIN: ${{ env.GITHUB_DOMAIN }}
                    GITLEAKS_CONFIG_FILE: ${{ env.GITLEAKS_CONFIG_FILE }}
                    IGNORE_GENERATED_FILES: ${{ env.IGNORE_GENERATED_FILES }}
                    IGNORE_GITIGNORED_FILES: ${{ env.IGNORE_GITIGNORED_FILES }}
                    JAVA_FILE_NAME: ${{ env.JAVA_FILE_NAME }}
                    JAVASCRIPT_ES_CONFIG_FILE: ${{ env.JAVASCRIPT_ES_CONFIG_FILE }}
                    JSCPD_CONFIG_FILE: ${{ env.JSCPD_CONFIG_FILE }}
                    LINTER_RULES_PATH: ${{ env.LINTER_RULES_PATH }}
                    LOG_FILE: ${{ env.LOG_FILE }}
                    LOG_LEVEL: ${{ env.LOG_LEVEL }}
                    MARKDOWN_CONFIG_FILE: ${{ env.MARKDOWN_CONFIG_FILE }}
                    MARKDOWN_CUSTOM_RULE_GLOBS: ${{ env.MARKDOWN_CUSTOM_RULE_GLOBS }}
                    MULTI_STATUS: ${{ env.MULTI_STATUS }}
                    NATURAL_LANGUAGE_CONFIG_FILE: ${{ env.NATURAL_LANGUAGE_CONFIG_FILE }}
                    POWERSHELL_CONFIG_FILE: ${{ env.POWERSHELL_CONFIG_FILE }}
                    PHP_CONFIG_FILE: ${{ env.PHP_CONFIG_FILE }}
                    PHP_PHPCS_FILE_NAME: ${{ env.PHP_PHPCS_FILE_NAME }}
                    PHP_PHPSTAN_CONFIG_FILE: ${{ env.PHP_PHPSTAN_CONFIG_FILE }}
                    PROTOBUF_CONFIG_FILE: ${{ env.PROTOBUF_CONFIG_FILE }}
                    PYTHON_BLACK_CONFIG_FILE: ${{ env.PYTHON_BLACK_CONFIG_FILE }}
                    PYTHON_FLAKE8_CONFIG_FILE: ${{ env.PYTHON_FLAKE8_CONFIG_FILE }}
                    PYTHON_ISORT_CONFIG_FILE: ${{ env.PYTHON_ISORT_CONFIG_FILE }}
                    PYTHON_MYPY_CONFIG_FILE: ${{ env.PYTHON_MYPY_CONFIG_FILE }}
                    PYTHON_PYLINT_CONFIG_FILE: ${{ env.PYTHON_PYLINT_CONFIG_FILE }}
                    PYTHON_RUFF_CONFIG_FILE: ${{ env.PYTHON_RUFF_CONFIG_FILE }}
                    RENOVATE_SHAREABLE_CONFIG_PRESET_FILE_NAMES: ${{ env.RENOVATE_SHAREABLE_CONFIG_PRESET_FILE_NAMES }}
                    RUBY_CONFIG_FILE: ${{ env.RUBY_CONFIG_FILE }}
                    SAVE_SUPER_LINTER_OUTPUT: ${{ env.SAVE_SUPER_LINTER_OUTPUT }}
                    SAVE_SUPER_LINTER_SUMMARY: ${{ env.SAVE_SUPER_LINTER_SUMMARY }}
                    SCALAFMT_CONFIG_FILE: ${{ env.SCALAFMT_CONFIG_FILE }}
                    SNAKEMAKE_SNAKEFMT_CONFIG_FILE: ${{ env.SNAKEMAKE_SNAKEFMT_CONFIG_FILE }}
                    SSL_CERT_SECRET: ${{ env.SSL_CERT_SECRET }}
                    SQL_CONFIG_FILE: ${{ env.SQL_CONFIG_FILE }}
                    SQLFLUFF_CONFIG_FILE: ${{ env.SQLFLUFF_CONFIG_FILE }}
                    SUPER_LINTER_OUTPUT_DIRECTORY_NAME: ${{ env.SUPER_LINTER_OUTPUT_DIRECTORY_NAME }}
                    SUPER_LINTER_SUMMARY_FILE_NAME: ${{ env.SUPER_LINTER_SUMMARY_FILE_NAME }}
                    SUPPRESS_FILE_TYPE_WARN: ${{ env.SUPPRESS_FILE_TYPE_WARN }}
                    SUPPRESS_POSSUM: ${{ env.SUPPRESS_POSSUM }}
                    TERRAFORM_TERRASCAN_CONFIG_FILE: ${{ env.TERRAFORM_TERRASCAN_CONFIG_FILE }}
                    TERRAFORM_TFLINT_CONFIG_FILE: ${{ env.TERRAFORM_TFLINT_CONFIG_FILE }}
                    TYPESCRIPT_ES_CONFIG_FILE: ${{ env.TYPESCRIPT_ES_CONFIG_FILE }}
                    TYPESCRIPT_STANDARD_TSCONFIG_FILE: ${{ env.TYPESCRIPT_STANDARD_TSCONFIG_FILE }}
                    USE_FIND_ALGORITHM: ${{ env.USE_FIND_ALGORITHM }}
                    VALIDATE_ALL_CODEBASE: ${{ env.VALIDATE_ALL_CODEBASE }}
                    VALIDATE_ANSIBLE: ${{ env.VALIDATE_ANSIBLE }}
                    VALIDATE_ARM: ${{ env.VALIDATE_ARM }}
                    VALIDATE_BASH: ${{ env.VALIDATE_BASH }}
                    VALIDATE_BASH_EXEC: ${{ env.VALIDATE_BASH_EXEC }}
                    VALIDATE_CPP: ${{ env.VALIDATE_CPP }}
                    VALIDATE_CHECKOV: ${{ env.VALIDATE_CHECKOV }}
                    VALIDATE_CLANG_FORMAT: ${{ env.VALIDATE_CLANG_FORMAT }}
                    VALIDATE_CLOJURE: ${{ env.VALIDATE_CLOJURE }}
                    VALIDATE_CLOUDFORMATION: ${{ env.VALIDATE_CLOUDFORMATION }}
                    VALIDATE_COFFEESCRIPT: ${{ env.VALIDATE_COFFEESCRIPT }}
                    VALIDATE_CSHARP: ${{ env.VALIDATE_CSHARP }}
                    VALIDATE_CSS: ${{ env.VALIDATE_CSS }}
                    VALIDATE_DART: ${{ env.VALIDATE_DART }}
                    VALIDATE_DOCKERFILE_HADOLINT: ${{ env.VALIDATE_DOCKERFILE_HADOLINT }}
                    VALIDATE_EDITORCONFIG: ${{ env.VALIDATE_EDITORCONFIG }}
                    VALIDATE_ENV: ${{ env.VALIDATE_ENV }}
                    VALIDATE_GHERKIN: ${{ env.VALIDATE_GHERKIN }}
                    VALIDATE_GITHUB_ACTIONS: ${{ env.VALIDATE_GITHUB_ACTIONS }}
                    VALIDATE_GITLEAKS: ${{ env.VALIDATE_GITLEAKS }}
                    VALIDATE_GO: ${{ env.VALIDATE_GO }}
                    VALIDATE_GO_MODULES: ${{ env.VALIDATE_GO_MODULES }}
                    VALIDATE_GO_RELEASER: ${{ env.VALIDATE_GO_RELEASER }}
                    VALIDATE_GOOGLE_JAVA_FORMAT: ${{ env.VALIDATE_GOOGLE_JAVA_FORMAT }}
                    VALIDATE_GROOVY: ${{ env.VALIDATE_GROOVY }}
                    VALIDATE_HTML: ${{ env.VALIDATE_HTML }}
                    VALIDATE_JAVA: ${{ env.VALIDATE_JAVA }}
                    VALIDATE_JAVASCRIPT_ES: ${{ env.VALIDATE_JAVASCRIPT_ES }}
                    VALIDATE_JAVASCRIPT_PRETTIER: ${{ env.VALIDATE_JAVASCRIPT_PRETTIER }}
                    VALIDATE_JAVASCRIPT_STANDARD: ${{ env.VALIDATE_JAVASCRIPT_STANDARD }}
                    VALIDATE_JSCPD: ${{ env.VALIDATE_JSCPD }}
                    VALIDATE_JSON: ${{ env.VALIDATE_JSON }}
                    VALIDATE_JSONC: ${{ env.VALIDATE_JSONC }}
                    VALIDATE_JSX: ${{ env.VALIDATE_JSX }}
                    VALIDATE_KOTLIN: ${{ env.VALIDATE_KOTLIN }}
                    VALIDATE_KUBERNETES_KUBECONFORM: ${{ env.VALIDATE_KUBERNETES_KUBECONFORM }}
                    VALIDATE_LATEX: ${{ env.VALIDATE_LATEX }}
                    VALIDATE_LUA: ${{ env.VALIDATE_LUA }}
                    VALIDATE_MARKDOWN: ${{ env.VALIDATE_MARKDOWN }}
                    VALIDATE_NATURAL_LANGUAGE: ${{ env.VALIDATE_NATURAL_LANGUAGE }}
                    VALIDATE_OPENAPI: ${{ env.VALIDATE_OPENAPI }}
                    VALIDATE_PERL: ${{ env.VALIDATE_PERL }}
                    VALIDATE_PHP: ${{ env.VALIDATE_PHP }}
                    VALIDATE_PHP_BUILTIN: ${{ env.VALIDATE_PHP_BUILTIN }}
                    VALIDATE_PHP_PHPCS: ${{ env.VALIDATE_PHP_PHPCS }}
                    VALIDATE_PHP_PHPSTAN: ${{ env.VALIDATE_PHP_PHPSTAN }}
                    VALIDATE_PHP_PSALM: ${{ env.VALIDATE_PHP_PSALM }}
                    VALIDATE_POWERSHELL: ${{ env.VALIDATE_POWERSHELL }}
                    VALIDATE_PROTOBUF: ${{ env.VALIDATE_PROTOBUF }}
                    VALIDATE_PYTHON: ${{ env.VALIDATE_PYTHON }}
                    VALIDATE_PYTHON_BLACK: ${{ env.VALIDATE_PYTHON_BLACK }}
                    VALIDATE_PYTHON_FLAKE8: ${{ env.VALIDATE_PYTHON_FLAKE8 }}
                    VALIDATE_PYTHON_ISORT: ${{ env.VALIDATE_PYTHON_ISORT }}
                    VALIDATE_PYTHON_MYPY: ${{ env.VALIDATE_PYTHON_MYPY }}
                    VALIDATE_PYTHON_PYLINT: ${{ env.VALIDATE_PYTHON_PYLINT }}
                    VALIDATE_PYTHON_RUFF: ${{ env.VALIDATE_PYTHON_RUFF }}
                    VALIDATE_R: ${{ env.VALIDATE_R }}
                    VALIDATE_RAKU: ${{ env.VALIDATE_RAKU }}
                    VALIDATE_RENOVATE: ${{ env.VALIDATE_RENOVATE }}
                    VALIDATE_RUBY: ${{ env.VALIDATE_RUBY }}
                    VALIDATE_RUST_2015: ${{ env.VALIDATE_RUST_2015 }}
                    VALIDATE_RUST_2018: ${{ env.VALIDATE_RUST_2018 }}
                    VALIDATE_RUST_2021: ${{ env.VALIDATE_RUST_2021 }}
                    VALIDATE_RUST_CLIPPY: ${{ env.VALIDATE_RUST_CLIPPY }}
                    VALIDATE_SCALAFMT: ${{ env.VALIDATE_SCALAFMT }}
                    VALIDATE_SHELL_SHFMT: ${{ env.VALIDATE_SHELL_SHFMT }}
                    VALIDATE_SNAKEMAKE_LINT: ${{ env.VALIDATE_SNAKEMAKE_LINT }}
                    VALIDATE_SNAKEMAKE_SNAKEFMT: ${{ env.VALIDATE_SNAKEMAKE_SNAKEFMT }}
                    VALIDATE_STATES: ${{ env.VALIDATE_STATES }}
                    VALIDATE_SQL: ${{ env.VALIDATE_SQL }}
                    VALIDATE_SQLFLUFF: ${{ env.VALIDATE_SQLFLUFF }}
                    VALIDATE_TEKTON: ${{ env.VALIDATE_TEKTON }}
                    VALIDATE_TERRAFORM_FMT: ${{ env.VALIDATE_TERRAFORM_FMT }}
                    VALIDATE_TERRAFORM_TERRASCAN: ${{ env.VALIDATE_TERRAFORM_TERRASCAN }}
                    VALIDATE_TERRAFORM_TFLINT: ${{ env.VALIDATE_TERRAFORM_TFLINT }}
                    VALIDATE_TERRAGRUNT: ${{ env.VALIDATE_TERRAGRUNT }}
                    VALIDATE_TSX: ${{ env.VALIDATE_TSX }}
                    VALIDATE_TYPESCRIPT_ES: ${{ env.VALIDATE_TYPESCRIPT_ES }}
                    VALIDATE_TYPESCRIPT_PRETTIER: ${{ env.VALIDATE_TYPESCRIPT_PRETTIER }}
                    VALIDATE_TYPESCRIPT_STANDARD: ${{ env.VALIDATE_TYPESCRIPT_STANDARD }}
                    VALIDATE_XML: ${{ env.VALIDATE_XML }}
                    VALIDATE_YAML: ${{ env.VALIDATE_YAML }}
                    YAML_CONFIG_FILE: ${{ env.YAML_CONFIG_FILE }}
                    YAML_ERROR_ON_WARNING: ${{ env.YAML_ERROR_ON_WARNING }}

    commitlint: # https://commitlint.js.org/guides/ci-setup.html
        runs-on: netex-platform-ubuntu-latest
        steps:
        - 
            uses: actions/checkout@v4
            with:
                fetch-depth: 0
        - 
            name: Set up Node.js
            uses: actions/setup-node@v4
            with:
                node-version: '16'
                
        - 
            name: Cache npm dependencies
            id: cache-npm
            uses: actions/cache@v4
            with:
                path: |
                    ~/.npm
                    node_modules
                key: ${{ github.workflow }}-${{ runner.os }}-npm-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('.github/workflows/pr-verify.yml') }}

        - 
            name: Install commitlint
            if: steps.cache-npm.outputs.cache-hit != 'true'
            run: |
                npm install --save-dev @commitlint/{config-conventional,cli}

        - 
            name: create config file
            run: |
                echo """module.exports = { extends: ['@commitlint/config-conventional'] };""" > commitlint.config.js

        - 
            name: Validate current commit (last commit) with commitlint
            if: github.event_name == 'push'
            run: npx commitlint --last --verbose

        - 
            name: Validate PR commits with commitlint
            id: pr-verify
            if: github.event_name == 'pull_request'
            run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

    teams:
        runs-on: netex-platform-ubuntu-latest
        needs: [ commitlint,code-lint ]
        if: always()
        steps:
        -
            name: Set variables
            run: |
                if [[ ${{ needs.commitlint.result }} != "failure" ]]; then
                    echo "commitlint=â" >> $GITHUB_ENV
                else
                    echo "commitlint=â" >> $GITHUB_ENV
                fi
        
                if [[ ${{ needs.code-lint.result }} != "failure" ]]; then
                    echo "code_lint=â" >> $GITHUB_ENV
                else
                    echo "code_lint=â" >> $GITHUB_ENV
                fi
        

        -
            name: send mensaje
            continue-on-error: true
            env:
              TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
            run: |
                curl -X POST -H "Content-Type: application/json" -d "{
                  \"type\": \"MessageCard\",
                  \"themeColor\": \"0076D7\",
                  \"title\": \"${GITHUB_WORKFLOW}: Ended in ${GITHUB_REPOSITORY}\",
                  \"text\": \"
                The PR-VERIFY by ${GITHUB_ACTOR} has finished in ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/pull/$PR \n
                \n
                The commit lint result -> $commitlint \n
                \n
                The code-lint result -> $code_lint \n
                \n
                You can check results in PR -> ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/pull/$PR \n
                and in github workflow ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_number }} \n
                \n
                \"
                }" $TEAMS_WEBHOOK_URL

    scan:
        runs-on: netex-platform-ubuntu-latest
        steps:
        - 
            name: Checkout code
            uses: actions/checkout@v4

        - 
            uses: github/codeql-action/init@v3
            with:
                db-location: '/tmp/${{ github.event_name }}'
                # path: code



# https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning#specifying-the-location-for-codeql-databases
